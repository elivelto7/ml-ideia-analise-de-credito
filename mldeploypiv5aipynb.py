# -*- coding: utf-8 -*-
"""mldeploypiv5aipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15msQs61aaGdxKZNms3TtBt0SyazFXQKZ
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import pickle
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

# Carregar dados
df = pd.read_csv('/content/application_credit_record_v5.csv', sep=',')

df.info()

# Função para pré-processar os dados
def preprocess_data(df):
    X = df.drop('status_do_emprestimo', axis=1)
    y = df['status_do_emprestimo']

    # Codificar variáveis categóricas
    label_encoders = {}
    for column in X.select_dtypes(include=['object']).columns:
        le = LabelEncoder()
        X[column] = le.fit_transform(X[column])
        label_encoders[column] = le

    return X, y, label_encoders

# Pré-processar os dados
X, y, label_encoders = preprocess_data(df)

# Dividir os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Criar um modelo de árvore de decisão
tree_model = DecisionTreeClassifier(random_state=42)

# Treinar o modelo
tree_model.fit(X_train, y_train)

# Salvar o modelo de árvore de decisão (decision tree)
with open('model_v5a.pkl', 'wb') as model_file:
    pickle.dump(tree_model, model_file)

# Salvar os label encoders de árvore de decisão (decision tree)
with open('label_encoders_v5a.pkl', 'wb') as le_file:
    pickle.dump(label_encoders, le_file)

# Avaliar o modelo
tree_score = tree_model.score(X_test, y_test)
print(f'Acurácia da Árvore de Decisão: {tree_score}')

